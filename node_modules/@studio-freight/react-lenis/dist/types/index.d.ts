/**
 * @param {CallbackFunction} [callback] Callback to be called on scroll
 * @param {Array=} [deps=[]] Dependencies for callback
 * @param {number=} [priority=0] Priority of callback (lower priority callbacks are called first)
 *
 * @returns {LenisInstance} Lenis instance
 */
export function useLenis(callback?: CallbackFunction, deps?: any[] | undefined, priority?: number | undefined): LenisInstance;
export const LenisContext: any;
export type EasingFunction = (rawValue: number) => number;
export type CallbackFunction = (instance: LenisInstance) => any;
export type CallbackEvents = {
    /**
     * scroll events
     */
    scroll: CallbackFunction[];
};
export type RAF = (time: number) => any;
export type ScrollToParams = {
    /**
     * equivalent to scroll-padding-top
     */
    offset?: number;
    /**
     * animation interpolation rate
     */
    lerp?: number;
    /**
     * animation duration (in seconds)
     */
    duration?: number;
    /**
     * animation easing
     */
    easing?: EasingFunction;
    /**
     * ignore duration, easing and lerp
     */
    immediate?: boolean;
    /**
     * whether or not to prevent the user from scrolling until the target is reached
     */
    lock?: boolean;
    /**
     * reach target even if instance is stopped
     */
    force?: boolean;
    /**
     * called when the target is reached
     */
    onComplete?: CallbackFunction;
};
export type ScrollTo = (target: number | string | HTMLElement, options?: ScrollToParams) => any;
export type ReactLenisOptions = {
    /**
     * interpolation rate
     */
    wrapper?: (HTMLElement | Window);
    content?: HTMLElement | undefined;
    wheelEventsTarget?: (HTMLElement | Window);
    /**
     * interpolation rate
     */
    lerp?: number | undefined;
    /**
     * scroll duration
     */
    duration?: number | undefined;
    easing?: EasingFunction | undefined;
    /**
     * scroll orientation
     */
    orientation?: string | undefined;
    gestureOrientation?: string | undefined;
    smoothWheel?: boolean | undefined;
    smoothTouch?: boolean | undefined;
    syncTouch?: boolean | undefined;
    syncTouchLerp?: number | undefined;
    touchInertiaMultiplier?: number | undefined;
    normalizeWheel?: boolean | undefined;
    /**
     * enable infinite scroll
     */
    infinite?: boolean | undefined;
    autoResize?: boolean | undefined;
};
export type Dimensions = {
    /**
     * Wrapper lenis is applied to
     */
    wrapper: (HTMLElement | Window);
    content: HTMLElement;
    contentResizeObserver: ResizeObserver;
    resize: () => void;
    onContentResize: () => void;
    onWrapperResize: () => void;
    /**
     * viewport width
     */
    width: number;
    /**
     * viewport height
     */
    height: number;
    scrollWidth: number;
    scrollHeight: number;
};
export type Emitter = {
    events: CallbackEvents;
};
export type EventHandler = (id: string, fn: CallbackFunction) => any;
export type LenisInstance = {
    /**
     * Current scroll value
     */
    animatedScroll: number;
    /**
     * Dimensions instance
     */
    dimensions: Dimensions;
    /**
     * scroll direction; 0: stopped, 1: scrolling up, -1: scrolling down
     */
    direction: number;
    /**
     * Emitter instance
     */
    emitter: Emitter;
    /**
     * Instance options {@link ReactLenisOptions }
     */
    options: ReactLenisOptions;
    /**
     * Target scroll value
     */
    targetScroll: number;
    /**
     * Time elapsed since instance creation
     */
    time: number;
    /**
     * Current scroll value registered by the browser
     */
    actualScroll: number;
    /**
     * Current scroll velocity
     */
    velocity: number;
    /**
     * Whether or not the instance is horizontal
     */
    isHorizontal: boolean;
    /**
     * Whether or not the instance is being animated
     */
    isScrolling: boolean;
    /**
     * Whether or not the instance is animated
     */
    isSmooth: boolean;
    /**
     * Whether or not the user should be able to scroll
     */
    isStopped: boolean;
    /**
     * Maximum scroll value
     */
    limit: number;
    /**
     * Scroll progress from 0 to 1
     */
    progress: number;
    /**
     * Element on which Lenis is instanced
     */
    rootElement: HTMLElement;
    /**
     * Current scroll value (handles infinite scroll if activated)
     */
    scroll: number;
    /**
     * Pauses the scroll
     */
    stop: () => void;
    /**
     * Resumes the scroll
     */
    start: () => void;
    /**
     * Compute internal sizes, has to be used if autoResize option is false
     */
    resize: () => void;
    /**
     * Destroys the instance and removes all events
     */
    destroy: () => void;
    /**
     * Lenis event listener
     */
    on: EventHandler;
    /**
     * Scroll to target
     */
    scrollTo: ScrollTo;
    /**
     * Must be called every frame for internal usage
     */
    raf: RAF;
};
/**
 * @param {boolean=} [root] Whether Lenis will be initialized on document.documentElement
 * @param {ReactLenisOptions} [options={}] Lenis options {@link ReactLenisOptions}
 * @param {boolean=} [autoRaf=true] Whether to call Lenis.raf automatically on every frame
 * @param {number=} [rafPriority=0] Priority of Lenis.raf call (lower priority callbacks are called first)
 * @param {string=} [className] Class name to be applied to the wrapper
 */
export const ReactLenis: any;
export { ReactLenis as Lenis };
