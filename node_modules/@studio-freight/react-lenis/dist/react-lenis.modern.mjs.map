{"version":3,"file":"react-lenis.modern.mjs","sources":["../src/index.jsx"],"sourcesContent":["'use client'\n\nimport { useFrame } from '@studio-freight/hamo'\nimport Lenis from '@studio-freight/lenis'\nimport PropTypes from 'prop-types' // ES6\nimport React, {\n  createContext,\n  forwardRef,\n  useCallback,\n  useContext,\n  useEffect,\n  useImperativeHandle,\n  useRef,\n  useState,\n} from 'react'\nimport { create } from 'zustand'\nimport cn from 'clsx'\n\nexport const LenisContext = createContext()\n\nconst useRoot = create(() => ({}))\n\nfunction useCurrentLenis() {\n  const local = useContext(LenisContext)\n  const root = useRoot()\n\n  return local ?? root\n}\n\n/**\n * @param {CallbackFunction} [callback] Callback to be called on scroll\n * @param {Array=} [deps=[]] Dependencies for callback\n * @param {number=} [priority=0] Priority of callback (lower priority callbacks are called first)\n *\n * @returns {LenisInstance} Lenis instance\n */\nexport function useLenis(callback, deps = [], priority = 0) {\n  const { lenis, addCallback, removeCallback } = useCurrentLenis()\n\n  useEffect(() => {\n    if (!callback || !addCallback || !removeCallback || !lenis) return\n\n    addCallback(callback, priority)\n    callback(lenis)\n\n    return () => {\n      removeCallback(callback)\n    }\n  }, [lenis, addCallback, removeCallback, priority, ...deps])\n\n  return lenis\n}\n\n/**\n * @param {boolean=} [root] Whether Lenis will be initialized on document.documentElement\n * @param {ReactLenisOptions} [options={}] Lenis options {@link ReactLenisOptions}\n * @param {boolean=} [autoRaf=true] Whether to call Lenis.raf automatically on every frame\n * @param {number=} [rafPriority=0] Priority of Lenis.raf call (lower priority callbacks are called first)\n * @param {string=} [className] Class name to be applied to the wrapper\n */\nconst ReactLenis = forwardRef(\n  ({ children, root = false, options = {}, autoRaf = true, rafPriority = 0, className, ...props }, ref) => {\n    const wrapperRef = useRef()\n    const contentRef = useRef()\n\n    const [lenis, setLenis] = useState()\n\n    const callbacks = useRef([])\n\n    const addCallback = useCallback((callback, priority) => {\n      callbacks.current.push({ callback, priority })\n      callbacks.current.sort((a, b) => a.priority - b.priority)\n    }, [])\n\n    const removeCallback = useCallback((callback) => {\n      callbacks.current = callbacks.current.filter((cb) => cb.callback !== callback)\n    }, [])\n\n    useImperativeHandle(ref, () => lenis, [lenis])\n\n    useEffect(() => {\n      const lenis = new Lenis({\n        ...options,\n        ...(!root && {\n          wrapper: wrapperRef.current,\n          content: contentRef.current,\n        }),\n      })\n\n      setLenis(lenis)\n\n      return () => {\n        lenis.destroy()\n        setLenis(undefined)\n      }\n    }, [root, JSON.stringify(options)])\n\n    useFrame((time) => {\n      if (autoRaf) {\n        lenis?.raf(time)\n      }\n    }, rafPriority)\n\n    useEffect(() => {\n      if (root && lenis) {\n        useRoot.setState({ lenis, addCallback, removeCallback })\n      }\n    }, [root, lenis, addCallback, removeCallback])\n\n    const onScroll = useCallback((e) => {\n      for (let i = 0; i < callbacks.current.length; i++) {\n        callbacks.current[i].callback(e)\n      }\n    }, [])\n\n    useEffect(() => {\n      lenis?.on('scroll', onScroll)\n\n      return () => {\n        lenis?.off('scroll', onScroll)\n      }\n    }, [lenis, onScroll])\n\n    const onClassNameChange = useCallback(() => {\n      if (wrapperRef.current) wrapperRef.current.className = cn(lenis?.className, className)\n    }, [lenis, className])\n\n    useEffect(() => {\n      onClassNameChange()\n\n      lenis?.on('className change', onClassNameChange)\n\n      return () => {\n        lenis?.off('className change', onClassNameChange)\n      }\n    }, [lenis, onClassNameChange])\n\n    return (\n      <LenisContext.Provider value={{ lenis, addCallback, removeCallback }}>\n        {root ? (\n          children\n        ) : (\n          <div ref={wrapperRef} className={cn(lenis?.className, className)} {...props}>\n            <div ref={contentRef}>{children}</div>\n          </div>\n        )}\n      </LenisContext.Provider>\n    )\n  },\n)\nReactLenis.displayName = 'ReactLenis'\n\nReactLenis.propTypes = {\n  children: PropTypes.node,\n  root: PropTypes.bool,\n  options: PropTypes.object,\n  autoRaf: PropTypes.bool,\n  rafPriority: PropTypes.number,\n  className: PropTypes.string,\n}\n\nexport { ReactLenis, ReactLenis as Lenis }\n\n/**\n * @callback EasingFunction\n * @param {number} rawValue\n * @returns {number} eased output value\n */\n\n/**\n * @callback CallbackFunction\n * @param {LenisInstance} instance\n */\n\n/**\n * @typedef {Object} CallbackEvents\n * @property {CallbackFunction[]} scroll scroll events\n */\n\n/**\n * @callback RAF\n * @param {number} time\n */\n\n/**\n * @typedef {Object} ScrollToParams\n * @property {number} [offset] equivalent to scroll-padding-top\n * @property {number} [lerp] animation interpolation rate\n * @property {number} [duration] animation duration (in seconds)\n * @property {EasingFunction} [easing] animation easing\n * @property {boolean} [immediate] ignore duration, easing and lerp\n * @property {boolean} [lock] whether or not to prevent the user from scrolling until the target is reached\n * @property {boolean} [force] reach target even if instance is stopped\n * @property {CallbackFunction} [onComplete] called when the target is reached\n */\n\n/**\n * @callback ScrollTo\n * @param {number|string|HTMLElement} target\n * @param {ScrollToParams} [options]\n */\n\n/**\n * @typedef {Object} ReactLenisOptions\n * @property {(HTMLElement|Window)} [wrapper=window] interpolation rate\n * @property {HTMLElement=} [content=document.documentElement]\n * @property {(HTMLElement|Window)} [wheelEventsTarget=wrapper]\n * @property {number=} [lerp=0.1] interpolation rate\n * @property {number=} [duration=1.2] scroll duration\n * @property {EasingFunction=} [easing=(t) => Math.min(1, 1.001 - Math.pow(2, -10 * t))] // easing function to apply to scroll values\n * @property {string=} [orientation='vertical'] scroll orientation\n * @property {string=} [gestureOrientation='vertical']\n * @property {boolean=} [smoothWheel=true]\n * @property {boolean=} [smoothTouch=false]\n * @property {boolean=} [syncTouch=false]\n * @property {number=} [syncTouchLerp=0.1]\n * @property {number=} [touchInertiaMultiplier=1]\n * @property {boolean=} [normalizeWheel=false]\n * @property {boolean=} [infinite=false] enable infinite scroll\n * @property {boolean=} [autoResize=true]\n */\n\n/**\n * @typedef {Object} Dimensions\n * @property {(HTMLElement|Window)} wrapper Wrapper lenis is applied to\n * @property {HTMLElement} content\n * @property {ResizeObserver} contentResizeObserver\n * @property {function():void} resize\n * @property {function():void} onContentResize\n * @property {function():void} onWrapperResize\n * @property {number} width viewport width\n * @property {number} height viewport height\n * @property {number} scrollWidth\n * @property {number} scrollHeight\n */\n\n/**\n * @typedef {Object} Emitter\n * @property {CallbackEvents} events\n */\n\n/**\n * @callback EventHandler\n * @param {string} id lenis instance event\n * @param {CallbackFunction} fn callback\n */\n\n/**\n * @typedef {Object} LenisInstance\n * @property {number} animatedScroll Current scroll value\n * @property {Dimensions} dimensions Dimensions instance\n * @property {number} direction scroll direction; 0: stopped, 1: scrolling up, -1: scrolling down\n * @property {Emitter} emitter Emitter instance\n * @property {ReactLenisOptions} options Instance options {@link ReactLenisOptions}\n * @property {number} targetScroll Target scroll value\n * @property {number} time Time elapsed since instance creation\n * @property {number} actualScroll Current scroll value registered by the browser\n * @property {number} velocity Current scroll velocity\n * @property {boolean} isHorizontal Whether or not the instance is horizontal\n * @property {boolean} isScrolling Whether or not the instance is being animated\n * @property {boolean} isSmooth Whether or not the instance is animated\n * @property {boolean} isStopped Whether or not the user should be able to scroll\n * @property {number} limit Maximum scroll value\n * @property {number} progress Scroll progress from 0 to 1\n * @property {HTMLElement} rootElement Element on which Lenis is instanced\n * @property {number} scroll Current scroll value (handles infinite scroll if activated)\n * @property {function():void} stop Pauses the scroll\n * @property {function():void} start Resumes the scroll\n * @property {function():void} resize Compute internal sizes, has to be used if autoResize option is false\n * @property {function():void} destroy Destroys the instance and removes all events\n * @property {EventHandler} on Lenis event listener\n * @property {ScrollTo} scrollTo Scroll to target\n * @property {RAF} raf Must be called every frame for internal usage\n */\n"],"names":["_excluded","LenisContext","createContext","useRoot","create","useLenis","callback","deps","priority","lenis","addCallback","removeCallback","local","useContext","root","useCurrentLenis","useEffect","ReactLenis","forwardRef","_ref","ref","children","options","autoRaf","rafPriority","className","props","_objectWithoutPropertiesLoose","wrapperRef","useRef","contentRef","setLenis","useState","callbacks","useCallback","current","push","sort","a","b","filter","cb","useImperativeHandle","Lenis","_extends","wrapper","content","destroy","undefined","JSON","stringify","useFrame","time","raf","setState","onScroll","e","i","length","on","off","onClassNameChange","cn","React","createElement","Provider","value","displayName","propTypes","PropTypes","node","bool","object","number","string"],"mappings":"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"}